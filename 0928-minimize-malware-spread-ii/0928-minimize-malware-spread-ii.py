class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def tarjan(i):
            nonlocal idVal
            
            ids[i] = idVal
            low[i] = idVal
            stack.append(i)
            inStack[i] = True
            
            idVal += 1
            
            for j in adj[i]:
                
                if ids[j] == -1:
                    tarjan(j)
                
                if inStack[j]:
                    low[i] = min(low[i], low[j])
            
            #we found the root of our connected component
            if low[i] == ids[i]:
                
                while stack:
                    val = stack.pop()
                    low[val] = ids[i]
                    inStack[val] = False
                    if val == ids[i]:
                        break
                    
                
        def dfs(i,x):
            nonlocal idVal
            virus = False
            if i in initial:
                virus = True
                return [0,True]
                
            ids[i] = idVal
            idVal += 1
            
            res = 0
            for j in adj[i]:
                
                if j == x or initLow[i] != initLow[j]:
                    continue
                    
                if ids[j] == -1:
                    r,v = dfs(j,x)
                    virus = virus or v
                    res += r
            
            return [res + 1,virus]
                    
                
 
        
        n = len(graph)
        stack = []
        inStack = [False] * n
        ids = [-1] * n
        low = [-1] * n
        idVal = 0
        
        initial = set(initial)
        adj = defaultdict(list)
        
        for i in range(len(graph)):
            for j in range(len(graph[i])):
                if graph[i][j] == 1 and i != j: 
                    adj[i].append(j)
        
        
        for i in range(len(graph)):
            if ids[i] == -1:
                tarjan(i)
        
        initLow = low.copy()
        best = [-1,-1]
        for i in sorted(initial):
            ids = [-1] * n
            idVal = 0
            curBest = 0
            for v in adj[i]:
                #make sure they are within the same connected component
                if ids[v] == -1 and initLow[i] == initLow[v]:
             
                    score,virus = dfs(v,i)
                    if not virus:
                        curBest += score
            if curBest > best[0]:
                best = [curBest, i]
            

        return best[1]
        
        