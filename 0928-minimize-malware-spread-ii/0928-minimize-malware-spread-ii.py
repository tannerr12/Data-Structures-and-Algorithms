class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def dfsStart(i,x):
            nonlocal idVal,score
            
            ids[i] = idVal
            #posId[idVal] = i
            low[i] = idVal
            stack.append(i)
            inStack[i] = True
            
            idVal += 1
            
            for j in adj[i]:
                
                if j == x:
                    continue
                    
                if ids[j] == -1:
                    dfsStart(j,x)
                
                if inStack[j]:
                    low[i] = min(low[i], low[j])
            
            #we found the root of our connected component
            if low[i] == ids[i]:
                
                while stack:
                    val = stack.pop()
                    low[val] = ids[i]
                    inStack[val] = False
                    if val in initial:
                        score = 0
                        virus = True
                    score += 1
                    if val == ids[i]:
                        break
                    
                
        def dfs(i,x):
            nonlocal idVal,score,virus
            
            if i in initial:
                virus = True
                return 
            ids[i] = idVal
            #posId[idVal] = i
            low[i] = idVal
            stack.append(i)
            inStack[i] = True
            
            idVal += 1
            
            for j in adj[i]:
                
                if j == x or initLow[i] != initLow[j]:
                    continue
                    
                if ids[j] == -1:
                    dfs(j,x)
                
                if inStack[j]:
                    low[i] = min(low[i], low[j])
            
            #we found the root of our connected component
            if low[i] == ids[i]:
                
                while stack:
                    val = stack.pop()
                    low[val] = ids[i]
                    inStack[val] = False
                    if val in initial:
                        virus = True
                    score += 1
                    if val == ids[i]:
                        break
                    
                
 
        
        n = len(graph)
        stack = []
        inStack = [False] * n
        ids = [-1] * n
        posId = [-1] * n
        low = [-1] * n
        idVal = 0
        best = defaultdict(int)
        score = 0
        initial = set(initial)
        adj = defaultdict(list)
        
        for i in range(len(graph)):
            for j in range(len(graph[i])):
                if graph[i][j] == 1 and i != j: 
                    adj[i].append(j)
        
        #print(adj)
        for i in range(len(graph)):
            if ids[i] == -1:
                dfsStart(i, -1)
        
        initLow = low.copy()
        #print(initLow)
        for i in initial:
            stack = []
            inStack = [False] * n
            ids = [-1] * n
            #posId = [-1] * n
            low = [-1] * n
            idVal = 0
            best[i] = 0
            for v in adj[i]:
                #make sure they are within the same connected component
                if ids[v] == -1 and initLow[i] == initLow[v]:
                    score = 0   
                    virus = False
                    stack = []
                    inStack = [False] * n
                    dfs(v,i)
                    if not virus:
                        best[i] += score
            
            #best[i] = max(1, best[i])
                
            
        #print(best)
        if len(best) > 0:
            mx = max(best.values())
        
            for key,val in sorted(best.items()):
                if val == mx:
                    return key
        
        
        
        return min(initial)